import HRInitialaizationModule
from datetime import datetime

# Nawaf Error Checking if employee ID is not an int 


def GenerateEmployeeLetters(employeeID):
    sheetDescriptor = HRInitialaizationModule.sheetDescriptor
    employeeRowLocation = -1
    for i in range(sheetDescriptor.nrows):
        if (sheetDescriptor.cell_value(i, HRInitialaizationModule.employeeIDColLocation)) == employeeID:
            employeeRowLocation = i
            print("FOUND EMPLOYEE, value is " + str(employeeRowLocation))
    if (employeeRowLocation == -1):    
        print ("Could not find employee")
        return employeeRowLocation
    convertedID = str(sheetDescriptor.cell_value(
        employeeRowLocation, HRInitialaizationModule.employeeIDColLocation))
    convertedName = str(sheetDescriptor.cell_value(
        employeeRowLocation, HRInitialaizationModule.nameColLocation))
    splitNameString = convertedName.split()
    convertedFullSalary = str(sheetDescriptor.cell_value(
        employeeRowLocation, HRInitialaizationModule.fullSalaryColLocation))
    convertedPosition = str(sheetDescriptor.cell_value(
        employeeRowLocation, HRInitialaizationModule.positionColLocation))
    convertedMonthsInService = str(int(sheetDescriptor.cell_value(
        employeeRowLocation, HRInitialaizationModule.monthsinServiceColLocation)))
    convertedStartDate = str(sheetDescriptor.cell_value(
        employeeRowLocation, HRInitialaizationModule.startDateColLocation))
    convertedTransportationAllowance = int(sheetDescriptor.cell_value(
        employeeRowLocation, HRInitialaizationModule.transportationAllowanceColLocation))
    convertedHousingAllowance = int(sheetDescriptor.cell_value(
        employeeRowLocation, HRInitialaizationModule.housingAllowanceColLocation))
    convertedBasicSalary = int(sheetDescriptor.cell_value(
        employeeRowLocation, HRInitialaizationModule.basicSalaryColLocation))
    convertedFullSalary = convertedBasicSalary + convertedHousingAllowance + convertedTransportationAllowance    
    employmentLetter = HRInitialaizationModule.giveMeSpaceToMidH + " WAHAJ LTD. (RIYADH) " + HRInitialaizationModule.giveMeSpaceToMidV + \
         "To whom it may concern, " + HRInitialaizationModule.newLine + HRInitialaizationModule.newLine + "This letter is to confirm that Mr. " \
            + convertedName + " has been working with us since " + convertedStartDate + ", Which bring his total service to " \
            + str(convertedMonthsInService) + " Months. " + HRInitialaizationModule.newLine + "Mr. " + splitNameString[1] + \
            " has been occupying the position of " + convertedPosition + ". He is currently receiving a housing allowance of " \
            + str(convertedHousingAllowance) + " SAR, and a transportation allowance of " + str(convertedTransportationAllowance) + \
            " SAR, and a basic salary of " + str(convertedBasicSalary) + ", which brings his total salary to: " + str(convertedFullSalary) + \
            " SAR. " + HRInitialaizationModule.giveMeSpaceToMidV + " Thank you " + HRInitialaizationModule.newLine + " Human Resources Team " \
            + HRInitialaizationModule.newLine + HRInitialaizationModule.newLine + " please note: this is an auto generated letter"
    f = open("../AutoGeneratedLetters/Employment Letters/" + convertedName + "_Employment_letter.txt", "w")
    f.write(employmentLetter)
    f.close()
    print("\n letter generated succesfully")
